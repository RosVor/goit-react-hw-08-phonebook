{"version":3,"file":"static/js/795.02659a06.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/pages/Contacts.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../redux/contactsSlice';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector((state) => state.contacts.items);\n  const status = useSelector((state) => state.contacts.status);\n  const error = useSelector((state) => state.contacts.error);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchContacts());\n    }\n  }, [status, dispatch]);\n\n  const handleDeleteContact = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n\n  if (status === 'loading') {\n    return <div>Loading...</div>;\n  }\n\n  if (status === 'failed') {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <ul className='contact-list'>\n      {contacts.map((contact) => (\n        <li className='contact-item' key={contact.id}>\n          {contact.name}: {contact.number}\n          <button className=\"button-delete\" type=\"button\" onClick={() => handleDeleteContact(contact.id)}>\n            Видалити\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../redux/contactsSlice';\nimport { getContacts } from '../redux/selectors';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const existingContact = contacts.find(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase() || contact.number === number\n    );\n\n    if (existingContact) {\n      alert('Alarm! The same contact!')\n    }\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit} className=\"contact-form\">\n      <label className=\"contact-inf\">\n        Name:\n        <input  \n        id=\"contactName\"\n        name=\"contactName\"\n        className=\"contact-input\" \n        type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n      </label>\n      <label className=\"contact-inf\">\n        Number:\n        <input \n        type=\"tel\"\n        id=\"phoneNumber\"\n        name=\"phoneNumber\"\n        className=\"contact-input\" \n        value={number} \n        onChange={(e) => setNumber(e.target.value)} \n        required\n        />\n      </label>\n      <button className=\"button-submit\" type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\n\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactList from '../ContactList/ContactList'; \nimport ContactForm from '../ContactForm/ContactForm'; \nimport { fetchContacts } from '../redux/contactsSlice'; \nimport { selectLoading } from '../redux/selectors'; \n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm /> \n      <div>{isLoading && 'Loading...'}</div>\n      <ContactList /> \n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","contacts","useSelector","state","items","status","error","useEffect","fetchContacts","_jsx","children","_jsxs","className","map","contact","name","number","type","onClick","contactId","id","deleteContact","getContacts","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","onSubmit","event","preventDefault","find","toLowerCase","alert","addContact","value","onChange","e","target","required","isLoading","selectLoading","_Fragment","Helmet","ContactForm","ContactList"],"sourceRoot":""}